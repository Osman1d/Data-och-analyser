import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.sparse import csc_matrix
from sklearn.neighbors import NearestNeighbors

# 1.1 - Movielens full - EDA

# Ladda datamängderna
filmer = pd.read_csv('ml-latest/movies.csv')
betyg = pd.read_csv('ml-latest/ratings.csv')

# a) EDA
print(betyg.head())
print(filmer.head())

# Plot distribution av betyg
plt.figure(figsize=(10, 4))
betyg['rating'].hist(bins=20)
plt.title('Fördelning av betyg')
plt.xlabel('Betyg')
plt.ylabel('Frekvens')
plt.show()

# b) Topp 10 filmer med flest betyg
mest_betyg_filmer = betyg['movieId'].value_counts().head(10)
print("Topp 10 filmer med flest betyg:")
print(mest_betyg_filmer)

# c) Genomsnittligt betyg för topp 10 filmer med flest betyg
genomsnittliga_betyg = betyg[betyg['movieId'].isin(mest_betyg_filmer.index)].groupby('movieId')['rating'].mean()
print("Genomsnittliga betyg för topp 10 filmer med flest betyg:")
print(genomsnittliga_betyg)

# d) Plot antal filmer per år
filmer['år'] = filmer['title'].str.extract(r'\((\d{4})\)', expand=False)
filmer['år'] = filmer['år'].astype(float)
filmer_per_år = filmer['år'].value_counts().sort_index()

plt.figure(figsize=(10, 4))
filmer_per_år.plot(kind='bar')
plt.title('Antal filmer per år')
plt.xlabel('År')
plt.ylabel('Antal filmer')
plt.show()

# e) Plot antal betyg per movieId
plt.figure(figsize=(10, 4))
betyg['movieId'].value_counts().plot(kind='bar')
plt.title('Antal betyg per MovieId')
plt.xlabel('MovieId')
plt.ylabel('Antal betyg')
plt.show()

# f) Stapeldiagram över genomsnittliga betyg för topp 10 filmer med flest betyg
plt.figure(figsize=(10, 4))
genomsnittliga_betyg.plot(kind='bar')
plt.title('Genomsnittliga betyg för topp 10 filmer med flest betyg')
plt.xlabel('MovieId')
plt.ylabel('Genomsnittligt betyg')
plt.show()

# 1.2 Skapa gles matris
# Filtrera datamängden för att inkludera filmer med minst 50 betyg
filtrerade_filmer = betyg['movieId'].value_counts()[betyg['movieId'].value_counts() >= 50].index
filtrerade_betyg = betyg[betyg['movieId'].isin(filtrerade_filmer)]

# Skapa pivottabell
pivot_tabell = filtrerade_betyg.pivot(index='movieId', columns='userId', values='rating').fillna(0)

# Skapa gles matris
gles_matris = csc_matrix(pivot_tabell.values)

# 1.3 Rekommender system
# Träna KNN-modell
model_knn = NearestNeighbors(metric='cosine', algorithm='brute')
model_knn.fit(gles_matris)

# Funktion för att rekommendera filmer
def rekommendera_filmer(film_titel, n_rekommendationer=5):
    film_lista = filmer[filmer['title'].str.contains(film_titel)]
    if len(film_lista):
        film_idx = film_lista.iloc[0]['movieId']
        film_idx = pivot_tabell.index.get_loc(film_idx)
        avstånd, index = model_knn.kneighbors(gles_matris[film_idx], n_neighbors=n_rekommendationer+1)
        rekommendationer = []
        for i in range(1, len(avstånd.flatten())):
            idx = pivot_tabell.index[index.flatten()[i]]
            rekommendationer.append(filmer[filmer['movieId'] == idx]['title'].values[0])
        return rekommendationer
    else:
        return "Inga filmer hittades med den titeln."

# Exempel på användning
print(rekommendera_filmer('Toy Story'))

# a) Beskrivning av rekommenderingssystemet
"""
Rekommenderingssystemet använder K-Nearest Neighbors (KNN) för att rekommendera filmer baserat på 
användarens input. Systemet tar en filmtitel som input, hittar filmen i datamängden och hittar sedan 
de 5 närmaste filmerna med hjälp av kosinuslikhet. De rekommenderade filmerna returneras sedan till användaren.
"""

# b) Beskrivning av rekommenderingssystem
"""
Rekommenderingssystem är algoritmer designade för att föreslå objekt till användare baserat på olika parametrar. 
Det finns huvudsakligen tre typer av rekommenderingssystem: innehållsbaserad filtrering, kollaborativ filtrering 
och hybridmetoder. Innehållsbaserad filtrering rekommenderar objekt som liknar de användaren visat intresse för 
baserat på objektets egenskaper. Kollaborativ filtrering rekommenderar objekt genom att identifiera mönster i 
användarbeteende eller preferenser. Hybridmetoder kombinerar både innehållsbaserad och kollaborativ filtrering.
"""

# Referenser:
# - "Recommender Systems: An Introduction" av Dietmar Jannach, Markus Zanker, Alexander Felfernig och Gerhard Friedrich
# - "Introduction to Recommender Systems" av Charu C. Aggarwal
# - Wikipedia: https://en.wikipedia.org/wiki/Recommender_system