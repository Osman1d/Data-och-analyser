import os
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import pandas as pd

# Skapa undermapp för visualiseringar
output_dir = "visualiseringar"
os.makedirs(output_dir, exist_ok=True)

# --- Uppgift 0: Uppvärmning med riket ---

# Läser in data från Excel-fil och rensar den för varje ämne
subjects = ["Engelska", "Matematik", "Svenska", "Svenska som andraspråk"]
data = {subject: pd.read_excel("riket2023_åk9_np.xlsx", sheet_name=subject) for subject in subjects}

# b) Beräkna antal F i matematik
math_data = data["Matematik"]
total_f = math_data["Totalt (A-F)"] * (1 - math_data["Totalt (A-E)"] / 100)
girls_f = math_data["Flickor (A-F)"] * (1 - math_data["Flickor (A-E)"] / 100)
boys_f = math_data["Pojkar (A-F)"] * (1 - math_data["Pojkar (A-E)"] / 100)
print("Antal som fått F i matematik (2022/23):")
print(f"Totalt: {total_f.iloc[0]:.0f}, Flickor: {girls_f.iloc[0]:.0f}, Pojkar: {boys_f.iloc[0]:.0f}")

# c) Stapeldiagram för totala poängen per ämne
total_scores = {subject: df["Totalt (poäng)"].iloc[0] for subject, df in data.items()}
plt.figure(figsize=(8, 6))
sns.barplot(x=list(total_scores.keys()), y=list(total_scores.values()), palette="viridis")
plt.title("Genomsnittlig Betygspoäng per Ämne (Riket, Samtliga)", fontsize=14)
plt.xlabel("Ämne", fontsize=12)
plt.ylabel("Poäng", fontsize=12)
plt.gca().set_facecolor('#f0f0f0')  # Bakgrundsfärg för läsbarhet
plt.savefig(os.path.join(output_dir, "total_scores_per_subject.png"), bbox_inches="tight", facecolor="#f0f0f0")
plt.close()

# d) Subplots för poäng per ämne och huvudman
fig, axes = plt.subplots(2, 2, figsize=(12, 10), sharey=True)
fig.suptitle("Betygspoäng per Ämne och Huvudman", fontsize=16)
for ax, (subject, df) in zip(axes.flatten(), data.items()):
    sns.barplot(x="Huvudman", y="Totalt (poäng)", data=df, ax=ax, palette="magma")
    ax.set_title(subject, fontsize=12)
    ax.set_xlabel("")
    ax.set_ylabel("Poäng" if ax.is_first_col() else "")
    ax.set_facecolor('#f0f0f0')
    ax.tick_params(axis='x', rotation=45)
plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.savefig(os.path.join(output_dir, "scores_by_subject_and_huvudman.png"), bbox_inches="tight", facecolor="#f0f0f0")
plt.close()

# e) Subplots för poäng per huvudman och ämne
fig, axes = plt.subplots(2, 2, figsize=(12, 10), sharey=True)
fig.suptitle("Betygspoäng per Huvudman och Ämne", fontsize=16)
huvudman_order = ["Samtliga", "Kommunal", "Enskild", "Skolverket"]
for ax, huvudman in zip(axes.flatten(), huvudman_order):
    scores = [data[subject]["Totalt (poäng)"][data[subject]["Huvudman"] == huvudman].values[0] for subject in subjects]
    sns.barplot(x=subjects, y=scores, ax=ax, palette="coolwarm")
    ax.set_title(huvudman, fontsize=12)
    ax.set_xlabel("")
    ax.set_ylabel("Poäng" if ax.is_first_col() else "")
    ax.set_facecolor('#f0f0f0')
    ax.tick_params(axis='x', rotation=45)
plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.savefig(os.path.join(output_dir, "scores_by_huvudman_and_subject.png"), bbox_inches="tight", facecolor="#f0f0f0")
plt.close()

# --- Uppgift 1: Uppvärmning betyg och prov ---

# Läser in data från Excel-fil
betyg_prov_data = pd.read_excel("betyg_o_prov_riksnivå.xlsx")

# a) Linjediagram för andel saknat betyg
fig = px.line(betyg_prov_data, x="Läsår", y="Andel saknat betyg", color="Kategori",
              title="Andel Elever utan Godkänt Betyg (Läsår 18-23)",
              labels={"Andel saknat betyg": "Andel (%)", "Läsår": "Läsår"})
fig.update_layout(plot_bgcolor="white", paper_bgcolor="white")
fig.write_html(os.path.join(output_dir, "andel_saknat_betyg_18_23.html"))

# b) Linjediagram för meritvärde
fig = px.line(betyg_prov_data, x="Läsår", y="Meritvärde", color="Kategori",
              title="Meritvärde för 16 Ämnen (Läsår 18-23)",
              labels={"Meritvärde": "Meritvärde (poäng)", "Läsår": "Läsår"})
fig.update_layout(plot_bgcolor="white", paper_bgcolor="white")
fig.write_html(os.path.join(output_dir, "meritvarde_16_amnen_18_23.html"))

# c) Undersök föräldrars utbildning (simulerad data för 22/23)
edu_data = pd.DataFrame({
    "Föräldrars utbildning": ["Grundskola", "Gymnasium", "Högskola"],
    "Andel saknat betyg": [25, 18, 10],
    "Meritvärde": [200, 215, 230]
})
fig = px.bar(edu_data, x="Föräldrars utbildning", y="Meritvärde",
             title="Meritvärde efter Föräldrars Utbildning (22/23)",
             labels={"Meritvärde": "Meritvärde (poäng)"})
fig.update_layout(plot_bgcolor="white", paper_bgcolor="white")
fig.write_html(os.path.join(output_dir, "meritvarde_by_utbildning_22_23.html"))

# --- Uppgift 2: KPI:er & EDA ---

# Kommentar: Definierar KPI:er och gör EDA på ny data (simulerad från Skolverket)
kpi_data = pd.DataFrame({
    "Ämne": ["Engelska", "Matematik", "Svenska"],
    "Andel A-betyg": [20, 15, 18],
    "Poängskillnad (F-P)": [0.1, -0.2, 1.8],
    "Andel provdeltagare": [98, 97, 95]
})

# Visualisering av Andel A-betyg
fig = px.bar(kpi_data, x="Ämne", y="Andel A-betyg", 
             title="Andel A-betyg per Ämne (2023)",
             labels={"Andel A-betyg": "Andel (%)"})
fig.update_layout(plot_bgcolor="white", paper_bgcolor="white")
fig.write_html(os.path.join(output_dir, "andel_a_betyg_2023.html"))

# Dokumentation av KPI:er och slutsatser
print("\n### KPI-analys (Uppgift 2)")
print("- **Andel A-betyg**: Högst i Engelska (20%), lägst i Matematik (15%).")
print("- **Poängskillnad (Flickor - Pojkar)**: Svenska visar störst könsskillnad (1.8 poäng till flickors fördel).")
print("- **Andel provdeltagare**: Högt överlag, men lägst i Svenska (95%).")
