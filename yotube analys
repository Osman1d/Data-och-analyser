import os
from pathlib import Path
import sqlite3
import pandas as pd
import streamlit as st
import plotly.express as px

# Använd Path för att hantera sökvägar plattformsoberoende
BASE_DIR = Path(__file__).parent
DB_FILE = BASE_DIR / "data.db"
RAW_DATA_DIR = BASE_DIR / "raw_data"
CSV_DATA_DIR = BASE_DIR / "csv_data"

def rename_raw_folders(raw_data_dir):
    raw_data_path = Path(raw_data_dir)
    if not raw_data_path.exists():
        print(f"Mappen '{raw_data_path}' finns inte")
        return
        
    for folder in raw_data_path.iterdir():
        if folder.is_dir():
            new_name = folder.name.split()[0]
            new_path = folder.parent / new_name
            try:
                folder.rename(new_path)
                print(f"Ändrade mappnamn: {folder.name} -> {new_name}")
            except Exception as e:
                print(f"Kunde inte byta namn på {folder}: {e}")

def load_csv_to_db(csv_folder, db_file):
    csv_path = Path(csv_folder)
    if not csv_path.exists():
        print(f"Mappen '{csv_path}' finns inte")
        return
        
    conn = sqlite3.connect(db_file)
    try:
        for csv_file in csv_path.glob("*.csv"):
            df = pd.read_csv(csv_file)
            table_name = csv_file.stem  # använder filnamn utan extension
            df.to_sql(table_name, conn, if_exists="replace", index=False)
            print(f"Inladdad {csv_file.name} till tabellen {table_name}")
    except Exception as e:
        print(f"Fel vid databasinladdning: {e}")
    finally:
        conn.close()

def get_data_from_db(query, db_file):
    if not Path(db_file).exists():
        raise FileNotFoundError(f"Databasen '{db_file}' hittades inte")
    
    conn = sqlite3.connect(db_file)
    try:
        df = pd.read_sql_query(query, conn)
        return df
    finally:
        conn.close()
