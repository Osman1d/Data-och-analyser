import os
import re
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.sparse import csc_matrix
from sklearn.neighbors import NearestNeighbors
import plotly.express as px

def load_movielens_data():
    """
    Läs in movies.csv och ratings.csv från den relativa sökvägen.
    """
    base_dir = os.path.dirname(os.path.abspath(__file__))
    movies_path = os.path.join(base_dir, "movies.csv")
    ratings_path = os.path.join(base_dir, "ratings.csv")
    
    movies = pd.read_csv(movies_path)
    ratings = pd.read_csv(ratings_path)
    return movies, ratings

def eda_movielens(movies, ratings, visual_dir):
    """
    1.1 - EDA för Movielens full dataset.
    
    a) Utför en explorativ dataanalys (flera plots).
    b) Visa de 10 filmerna med flest ratings.
    c) Beräkna genomsnittlig rating för dessa 10 filmer.
    d) Plot över årtal och antalet filmer.
    e) Plot över antalet ratings mot movieId.
    f) Stapeldiagram med genomsnittliga ratings för de 10 filmerna med flest ratings.
    """
    # a) Allmän EDA
    print("Dataset Movies - Info:")
    print(movies.info())
    print(movies.head())
    print("\nDataset Ratings - Info:")
    print(ratings.info())
    print(ratings.head())
    
    # Plot: Fördelning av ratingvärden
    plt.figure(figsize=(8, 5))
    sns.countplot(x='rating', data=ratings, palette="viridis")
    plt.title("Fördelning av ratingvärden")
    plt.xlabel("Rating")
    plt.ylabel("Antal")
    plt.tight_layout()
    plt.gcf().set_facecolor('white')
    plt.savefig(os.path.join(visual_dir, "rating_distribution.png"), dpi=300)
    plt.close()
    
    # b) De 10 filmerna med flest ratings
    rating_counts = ratings.groupby("movieId").size().reset_index(name="num_ratings")
    top10 = rating_counts.sort_values("num_ratings", ascending=False).head(10)
    top10 = top10.merge(movies, on="movieId", how="left")
    print("\nDe 10 filmerna med flest ratings:")
    print(top10[["movieId", "title", "num_ratings"]])
    
    # c) Genomsnittlig rating för dessa 10 filmer
    top10_avg = ratings.groupby("movieId")["rating"].mean().reset_index(name="avg_rating")
    top10 = top10.merge(top10_avg, on="movieId", how="left")
    print("\nGenomsnittlig rating för de 10 filmerna med flest ratings:")
    print(top10[["movieId", "title", "avg_rating"]])
    
    # f) Stapeldiagram: Genomsnittliga ratings för de 10 filmerna med flest ratings
    plt.figure(figsize=(10, 6))
    sns.barplot(data=top10.sort_values("avg_rating", ascending=False), 
                x="title", y="avg_rating", palette="magma")
    plt.title("Genomsnittliga ratings för top 10 filmer (flest ratings)", fontsize=16)
    plt.xlabel("Film", fontsize=14)
    plt.ylabel("Genomsnittlig rating", fontsize=14)
    plt.xticks(rotation=45, ha="right")
    plt.tight_layout()
    plt.gcf().set_facecolor('white')
    plt.savefig(os.path.join(visual_dir, "top10_avg_rating.png"), dpi=300)
    plt.close()
    
    # d) Plot över årtal och antalet filmer
    # Försök extrahera årtal från filmens titel (ofta i formatet "Filmnamn (År)")
    def extract_year(title):
        match = re.search(r'\((\d{4})\)', title)
        return int(match.group(1)) if match else np.nan

    movies['year'] = movies['title'].apply(extract_year)
    year_counts = movies['year'].value_counts().sort_index()
    
    plt.figure(figsize=(10, 6))
    sns.lineplot(x=year_counts.index, y=year_counts.values, marker="o")
    plt.title("Antal filmer per år", fontsize=16)
    plt.xlabel("År", fontsize=14)
    plt.ylabel("Antal filmer", fontsize=14)
    plt.tight_layout()
    plt.gcf().set_facecolor('white')
    plt.savefig(os.path.join(visual_dir, "movies_per_year.png"), dpi=300)
    plt.close()
    
    # e) Plot över antalet ratings mot movieId
    plt.figure(figsize=(10, 6))
    sns.scatterplot(data=rating_counts, x="movieId", y="num_ratings", color="teal")
    plt.title("Antal ratings per movieId", fontsize=16)
    plt.xlabel("movieId", fontsize=14)
    plt.ylabel("Antal ratings", fontsize=14)
    plt.tight_layout()
    plt.gcf().set_facecolor('white')
    plt.savefig(os.path.join(visual_dir, "ratings_vs_movieId.png"), dpi=300)
    plt.close()
    
def create_sparse_matrix(ratings, min_ratings_movie=50, min_ratings_user=10):
    """
    Create a sparse matrix from ratings data with filtering.
    
    Args:
        ratings (pd.DataFrame): DataFrame containing movie ratings
        min_ratings_movie (int): Minimum number of ratings per movie
        min_ratings_user (int): Minimum number of ratings per user
        
    Returns:
        tuple: (sparse_matrix, movie_to_idx, user_to_idx)
    """
    if ratings.empty:
        raise ValueError("Ratings DataFrame is empty")
        
    # Filtrera filmer med få ratings
    movie_rating_counts = ratings.groupby("movieId").size()
    valid_movies = movie_rating_counts[movie_rating_counts >= min_ratings_movie].index
    ratings_filtered = ratings[ratings["movieId"].isin(valid_movies)]
    
    # Filtrera användare med få ratings
    user_rating_counts = ratings_filtered.groupby("userId").size()
    valid_users = user_rating_counts[user_rating_counts >= min_ratings_user].index
    ratings_filtered = ratings_filtered[ratings_filtered["userId"].isin(valid_users)]
    
    # Skapa mappings
    unique_movie_ids = ratings_filtered["movieId"].unique()
    unique_user_ids = ratings_filtered["userId"].unique()
    movie_to_idx = {movie_id: idx for idx, movie_id in enumerate(unique_movie_ids)}
    user_to_idx = {user_id: idx for idx, user_id in enumerate(unique_user_ids)}
    
    # Fyll i listor med rad, kolumn och data (rating)
    rows = ratings_filtered["movieId"].apply(lambda x: movie_to_idx[x]).values
    cols = ratings_filtered["userId"].apply(lambda x: user_to_idx[x]).values
    data = ratings_filtered["rating"].values
    
    # Skapa sparse matrix (csc format)
    sparse_mat = csc_matrix((data, (rows, cols)), shape=(len(unique_movie_ids), len(unique_user_ids)))
    
    print("Sparse matrix skapad med formen:", sparse_mat.shape)
    return sparse_mat, movie_to_idx, user_to_idx

def build_recommender_system(movies, ratings, movie_to_idx, sparse_mat, visual_dir):
    """
    1.3 - Skapa ett recommender system med KNN.
    
    Systemet tar en sökquery (del av filmens titel) från användaren, matchar till en film,
    och returnerar de 5 närmaste filmerna (baserat på KNN, cosine similarity).
    
    a) Beskrivning: Vi använder den glesa matrisen med rader motsvarande filmer.
       Med hjälp av scikit-learns NearestNeighbors (med cosine distance) hittar vi
       de filmer som har liknande rating-mönster. Filmen som matchar användarens sökquery
       väljs, och de 5 närmaste grannarna returneras.
    b) Läsning om recommender system: En vanlig metod är kollaborativ filtrering.
       (Se t.ex. [Ricci et al., 2011](https://dl.acm.org/doi/abs/10.1145/2043932.2043952) för en översikt.)
    """
    # Skapa en modell med cosine-similaritet
    model_knn = NearestNeighbors(metric="cosine", algorithm="brute")
    model_knn.fit(sparse_mat)
    
    # Be användaren mata in en sökquery
    query = input("Skriv in en del av filmtiteln du söker: ").strip().lower()
    
    # Matcha query mot movies['title']
    movies["title_lower"] = movies["title"].str.lower()
    matches = movies[movies["title_lower"].str.contains(query, na=False)]
    
    if matches.empty:
        print("Ingen film hittades med den sökqueryn.")
        return
    
    # Om flera matchar, välj den med flest ratings
    rating_counts = ratings.groupby("movieId").size().reset_index(name="num_ratings")
    matches = matches.merge(rating_counts, on="movieId", how="left")
    matches.sort_values("num_ratings", ascending=False, inplace=True)
    
    chosen_movie = matches.iloc[0]
    print(f"Vald film: {chosen_movie['title']} (movieId: {chosen_movie['movieId']})")
    
    # Hitta index i den glesa matrisen för den valda filmen
    if chosen_movie["movieId"] not in movie_to_idx:
        print("Den valda filmen finns inte i den filtrerade sparse matrisen.")
        return
    
    chosen_idx = movie_to_idx[chosen_movie["movieId"]]
    
    # Hitta de 6 närmaste (vi tar 6 eftersom den valda filmen kommer att vara den första)
    distances, indices = model_knn.kneighbors(sparse_mat[chosen_idx], n_neighbors=6)
    
    # Ta bort första träffen (den valda filmen själv) och visa de 5 rekommendationerna
    rec_indices = indices.squeeze()[1:]
    
    # Skapa en omvänd mapping: index -> movieId
    idx_to_movie = {idx: movie_id for movie_id, idx in movie_to_idx.items()}
    
    print("\nRekommenderade filmer:")
    for idx in rec_indices:
        movie_id = idx_to_movie[idx]
        title = movies[movies["movieId"] == movie_id]["title"].values[0]
        print(title)

    # Beskrivning med ord:
    print("\nBeskrivning av recommender systemet:")
    print("Systemet bygger på kollaborativ filtrering med hjälp av en glesa användar-film-matris.")
    print("Genom att använda KNN med cosine-similaritet hittar vi filmer med liknande rating-mönster.")
    print("Användarens sökquery matchas mot filmens titel, och den film som matchar bäst väljs som utgångspunkt.")
    print("Därefter returneras de 5 filmer som är mest lika den valda filmen.")
    print("\nFör vidare läsning om recommender system, se t.ex.:")
    print("Ricci, F., Rokach, L., Shapira, B., & Kantor, P. (2011). Recommender Systems Handbook. Springer.")

def main():
    # Skapa output-mappen "visualiseringar" (relativ sökväg)
    base_dir = os.path.dirname(os.path.abspath(__file__))
    visual_dir = os.path.join(base_dir, "visualiseringar")
    if not os.path.exists(visual_dir):
        os.makedirs(visual_dir)
    
    # Ladda in Movielens-datan
    movies, ratings = load_movielens_data()
    
    # Utför EDA och spara grafer
    eda_movielens(movies, ratings, visual_dir)
    
    # Skapa en gles matris från ratings-data (filtrera för att hantera storlek)
    sparse_mat, movie_to_idx, user_to_idx = create_sparse_matrix(ratings)
    
    # Skapa ett recommender system med KNN
    build_recommender_system(movies, ratings, movie_to_idx, sparse_mat, visual_dir)
    
if __name__ == "__main__":
    main()