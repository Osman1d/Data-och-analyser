import os
import random
import glob
import shutil
import matplotlib.pyplot as plt
from PIL import Image

# För reproducerbarhet
random.seed(42)

# =============================================================================
# a) Datasetet: 
#    - Ladda ned Dogs vs Cats från Kaggle och extrahera det i din labfolder.
#    - Lägg till datamappen (ex. original_data/) i din .gitignore-fil.
# =============================================================================
# OBS! Detta görs manuellt. Se till att mappen "original_data" finns i labfoldern med
# rätt struktur, t.ex.:
# original_data/
# ├── train/
# │    └── train/   (alla bilder)
# └── test/
#      └── test/

# =============================================================================
# b) Läs in 10 slumpmässiga bilder från original_data/train/train, plotta dem och visa deras label.
# =============================================================================
def plot_random_images(num_images=10):
    # Sökväg till träningsbilderna (justera vid behov)
    train_dir = os.path.join(os.getcwd(), "original_data", "train", "train")
    image_paths = glob.glob(os.path.join(train_dir, "*.jpg"))
    
    if len(image_paths) < num_images:
        print("Det finns färre än {} bilder i mappen.".format(num_images))
        return
    
    # Välj ut slumpmässigt num_images bilder
    sample_images = random.sample(image_paths, num_images)
    
    plt.figure(figsize=(15, 10))
    for i, img_path in enumerate(sample_images):
        # Läs in bilden med PIL
        img = Image.open(img_path)
        # Extrahera label från filnamnet, t.ex. "dog.1234.jpg" -> "dog"
        filename = os.path.basename(img_path)
        if filename.startswith("cat"):
            label = "cat"
        elif filename.startswith("dog"):
            label = "dog"
        else:
            label = "unknown"
        
        plt.subplot(2, 5, i+1)
        plt.imshow(img)
        plt.title(label)
        plt.axis("off")
    plt.tight_layout()
    plt.show()

# Anropa funktionen för att visa 10 slumpmässiga bilder
plot_random_images()

# =============================================================================
# c) Skapa folderstrukturen med Python
# Struktur enligt uppgiften:
#
# .
# ├── experiment_small_data
# │   ├── test
# │   ├── train
# │   └── val
# ├── experiment_tiny_data
# │   ├── test
# │   ├── train
# │   └── val
# ├── lab.ipynb
# └── original_data
#     ├── test
#     │   └── test
#     └── train
#         └── train
# =============================================================================
def create_folder_structure():
    base_dir = os.getcwd()
    folders = [
        os.path.join(base_dir, "experiment_small_data", "train"),
        os.path.join(base_dir, "experiment_small_data", "val"),
        os.path.join(base_dir, "experiment_small_data", "test"),
        os.path.join(base_dir, "experiment_tiny_data", "train"),
        os.path.join(base_dir, "experiment_tiny_data", "val"),
        os.path.join(base_dir, "experiment_tiny_data", "test"),
        # original_data/structure för test och train bör redan existera efter extrahering
        os.path.join(base_dir, "original_data", "test", "test"),
        os.path.join(base_dir, "original_data", "train", "train"),
    ]
    for folder in folders:
        os.makedirs(folder, exist_ok=True)
    print("Folderstrukturen skapades.")

create_folder_structure()

# =============================================================================
# d) Gör train/val/test-split för experiment_small_data:
#    - train: 1600 bilder (800 dogs, 800 cats)
#    - val: 400 bilder (200 dogs, 200 cats)
#    - test: 500 bilder (250 dogs, 250 cats)
#
# Vi utgår ifrån att alla bilder med labels finns i original_data/train/train.
# =============================================================================
def split_dataset_for_experiment_small():
    base_dir = os.getcwd()
    source_dir = os.path.join(base_dir, "original_data", "train", "train")
    all_images = glob.glob(os.path.join(source_dir, "*.jpg"))
    
    # Separera bilder baserat på label utifrån filnamn
    dog_images = [img for img in all_images if os.path.basename(img).startswith("dog")]
    cat_images = [img for img in all_images if os.path.basename(img).startswith("cat")]
    
    print(f"Totalt antal hundbilder: {len(dog_images)}, kattbilder: {len(cat_images)}")
    
    # Kontrollera om det finns tillräckligt med bilder
    required_dogs = 1250  # 800 + 200 + 250
    required_cats = 1250  # 800 + 200 + 250
    if len(dog_images) < required_dogs or len(cat_images) < required_cats:
        raise ValueError(f"Otillräckligt antal bilder. Behöver minst {required_dogs} hundar och {required_cats} katter.")
    
    # Funktion för att dela en lista i train, val och test med givna antal
    def split_data(image_list, train_count, val_count, test_count):
        # Välj slumpmässigt (utan upprepning) de totala antalet bilder
        selected = random.sample(image_list, train_count + val_count + test_count)
        train_images = selected[:train_count]
        val_images = selected[train_count:train_count + val_count]
        test_images = selected[train_count + val_count:]
        return train_images, val_images, test_images
    
    # Split för hundar: 800, 200, 250
    train_dogs, val_dogs, test_dogs = split_data(dog_images, 800, 200, 250)
    # Split för katter: 800, 200, 250
    train_cats, val_cats, test_cats = split_data(cat_images, 800, 200, 250)
    
    # Sammanställning
    train_split = train_dogs + train_cats
    val_split = val_dogs + val_cats
    test_split = test_dogs + test_cats
    
    # Destinationer
    dest_train = os.path.join(base_dir, "experiment_small_data", "train")
    dest_val = os.path.join(base_dir, "experiment_small_data", "val")
    dest_test = os.path.join(base_dir, "experiment_small_data", "test")
    
    # Kopiera bilderna
    def copy_images(image_list, destination):
        for img_path in image_list:
            shutil.copy2(img_path, destination)
    
    copy_images(train_split, dest_train)
    copy_images(val_split, dest_val)
    copy_images(test_split, dest_test)
    
    print("Dataset-split kopierat till experiment_small_data:")
    print(f"  Train: {len(train_split)} bilder")
    print(f"  Val: {len(val_split)} bilder")
    print(f"  Test: {len(test_split)} bilder")

split_dataset_for_experiment_small()
