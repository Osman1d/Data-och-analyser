import os
import numpy as np

# Hämta sökvägen till mappen där skriptet ligger
base_dir = os.path.dirname(os.path.abspath(__file__))
# Skapa en relativ sökväg till filen med Pikachu-träningsdata
PIKACHU_FILE_PATH = os.path.join(base_dir, "pikachu (1).txt")

def load_training_data(file_path):
    data = []
    try:
        with open(file_path, 'r') as f:
            lines = f.readlines()
        for line in lines[1:]:
            line = line.strip()
            if not line:
                continue
            line = line.strip("()")
            parts = line.split(',')
            if len(parts) == 2:
                try:
                    width = float(parts[0])
                    height = float(parts[1])
                    data.append([width, height])
                except ValueError:
                    print(f"Kunde inte omvandla värden i raden: {line}")
    except FileNotFoundError:
        print(f"Filen hittades inte: {file_path}")
    return np.array(data)

# Ladda Pikachu-träningsdata från filen med relativ sökväg
pikachu_data = load_training_data(PIKACHU_FILE_PATH)

# Definiera Pichu-träningsdata manuellt
pichu_data = np.array([
    [15, 14],
    [26, 30],
    [17, 16],
    [20, 22],
    [18, 19]
])

# Kombinera träningsdata och skapa motsvarande etiketter
training_points = np.vstack((pichu_data, pikachu_data))
labels = np.array(["Pichu"] * len(pichu_data) + ["Pikachu"] * len(pikachu_data))

def classify_kNN(sample, training_points, labels, k=5):
    
    distances = np.linalg.norm(training_points - sample, axis=1)
    nearest_indices = np.argsort(distances)[:k]
    nearest_labels = labels[nearest_indices]
    
    unique, counts = np.unique(nearest_labels, return_counts=True)
    max_count = np.max(counts)
    candidates = unique[counts == max_count]
    
    if len(candidates) == 1:
        return candidates[0]
    else:
        # Vid oavgjort, välj den klass som tillhör den allra närmaste grannen bland kandidaterna
        for idx in nearest_indices:
            if labels[idx] in candidates:
                return labels[idx]

def get_user_input():
    """
    Hämtar användarens indata för bredd och höjd med felhantering.
    Kontrollerar att inmatade värden är numeriska och positiva.
    """
    while True:
        try:
            width_input = input("Ange bredd (positivt tal): ")
            height_input = input("Ange höjd (positivt tal): ")
            width = float(width_input)
            height = float(height_input)
            if width < 0 or height < 0:
                print("Fel: Negativa tal är inte tillåtna. Var vänlig ange positiva värden.\n")
                continue
            return np.array([width, height])
        except ValueError:
            print("Fel: Ogiltigt värde. Var vänlig ange numeriska värden.\n")

  Hämta testpunkt från användaren med felhantering
test_sample = get_user_input()

 Klassificera testpunkten med kNN (k=5)
result = classify_kNN(test_sample, training_points, labels, k=5)
print(f"Testpunkten ({test_sample[0]}, {test_sample[1]}) klassificeras som: {result}")

         
    